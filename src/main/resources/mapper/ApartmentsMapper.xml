<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.ApartmentsMapper">

    <select id="getAllApartments" resultType="business.ApartmentViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported, CASE WHEN ads.userid = #{userId} THEN true ELSE false END AS isOwner, ads.isarchived
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.isarchived = false
    </select>


    <select id="getApartmentById" resultType="business.ApartmentDetailsViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported, CASE WHEN ads.userid = #{userId} THEN true ELSE false END AS isOwner, u.email, u.phonenumber, ap.disponibility, s.number
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.adid = #{id}
    </select>

    <select id="deleteApartment">
        DELETE FROM app.Apartments
        WHERE apartmentId = coalesce(#{id}, apartmentId);
    </select>

    <insert id="addToFavorites">
        INSERT INTO app.favorites(userid, adid)
        VALUES (#{userId}, #{adId})
    </insert>

    <delete id="removeFromFavorites">
        DELETE FROM app.favorites
        WHERE adid = #{adId} AND userid = #{userId}
    </delete>

    <select id="getFavoriteApartments" resultType="business.ApartmentViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported, CASE WHEN ads.userid = #{userId} THEN true ELSE false END AS isOwner, ads.isarchived
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  INNER JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.isarchived is distinct from true
    </select>

    <select id="getApartmentsByCriteria" resultType="business.ApartmentViewModel">
        SELECT
        ads.adid,
        ads.title,
        ads.description,
        ads.price,
        CONCAT(u.firstname, ' ', u.lastname) AS adSellerName,
        s.score,
        ads.folderpath,
        CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved,
        CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported,
        CASE WHEN ads.userid = #{userId} THEN true ELSE false END AS isOwner,
        ads.isarchived
        FROM app.apartments AS ap
        INNER JOIN app.ads AS ads ON ap.adid = ads.adid
        INNER JOIN app.users AS u ON ads.userid = u.userid
        INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
        LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
        LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.isarchived = false

        <if test="minPrice != null">
            AND ads.price &gt;= #{minPrice}
        </if>
        <if test="maxPrice != null">
            AND ads.price &lt;= #{maxPrice}
        </if>
        <if test="minScore != null">
            AND s.score &gt;= #{minScore}
        </if>
        <if test="disponibilityBefore != null">
            AND DATE(ap.disponibility) &lt;= #{disponibilityBefore}
        </if>
        <if test="apartmentSize != null">
            AND ap.apartmentSize = #{apartmentSize}
        </if>

        <choose>
            <when test="sortBy == 'price_asc'">
                ORDER BY ads.price ASC
            </when>
            <when test="sortBy == 'price_desc'">
                ORDER BY ads.price DESC
            </when>
            <when test="sortBy == 'publication_asc'">
                ORDER BY ads.publicationdate ASC
            </when>
            <when test="sortBy == 'publication_desc'">
                ORDER BY ads.publicationdate DESC
            </when>
            <otherwise>
                ORDER BY ads.price ASC, ads.publicationdate DESC
            </otherwise>
        </choose>
    </select>


    <insert id="createAd">
        INSERT INTO app.Ads(adId, title, description, folderPath, publicationDate, price, userId, isArchived)
        VALUES (#{id}, #{title}, #{description}, #{folderPath}, CURRENT_TIMESTAMP, #{price}, #{userId}, false);
    </insert>

    <insert id="createApartment">
        INSERT INTO app.apartments(apartmentId, disponibility, address, apartmentSizeId, adId)
        VALUES (#{apartmentId}, #{disponibility}, #{address}, #{apartmentSizeId}, #{adId});
    </insert>

    <select id="getAllApartmentsFromUser" resultType="business.ApartmentViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported, CASE WHEN ads.userid = #{userId} THEN true ELSE false END AS isOwner, ads.isarchived
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.userid = #{userId}
    </select>

    <select id="getSizes" resultType="business.ApartmentSize">
        SELECT * FROM app.apartmentsizes;

    </select>

    <select id="getSellerId" resultType="String">
        SELECT ads.userid
        FROM app.ads
        WHERE ads.adid = #{adId}
    </select>

    <update id="archiveAd">
        UPDATE app.ads
        SET isarchived = true
        WHERE adid = #{adId}
    </update>


</mapper>