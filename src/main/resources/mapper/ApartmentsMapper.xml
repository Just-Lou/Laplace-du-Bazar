<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.ApartmentsMapper">

    <select id="getAllApartments" resultType="business.ApartmentViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.isarchived = false
    </select>


    <select id="getApartmentById" resultType="business.ApartmentDetailsViewModel">
        SELECT ads.adid, ads.title, ads.description, ads.price, CONCAT(u.firstname, ' ', u.lastname) AS adSellerName, s.score, ads.folderpath, CASE WHEN f.adid IS NOT NULL THEN true ELSE false END AS isSaved, CASE WHEN r.adid IS NOT NULL THEN true ELSE false END AS isReported, u.email, u.phonenumber, ap.disponibility, s.number
        FROM app.apartments AS ap INNER JOIN app.ads AS ads ON ap.adid = ads.adid
                                  INNER JOIN app.users AS u ON ads.userid = u.userid
                                  INNER JOIN app.scores AS s ON u.scoresellerid = s.scoreid
                                  LEFT JOIN app.favorites AS f ON #{userId} = f.userid AND ads.adid = f.adid
                                  LEFT JOIN app.reports AS r ON #{userId} = r.userid AND ads.adid = r.adid
        WHERE ads.adid = #{id}
    </select>

    <select id="deleteApartment">
        DELETE FROM app.Apartments
        WHERE apartmentId = coalesce(#{id}, apartmentId);
    </select>

	<insert id="addToFavorites">
        INSERT INTO app.favorites(userid, adid)
        VALUES (#{userId}, #{adId})
    </insert>

    <delete id="removeFromFavorites">
        DELETE FROM app.favorites
        WHERE adid = #{adId} AND userid = #{userId}
    </delete>

    <select id="getFavoriteApartments" resultType="business.ApartmentViewModel">
        select ads.adid, ads.title, ads.description, ads.price, ads.publicationdate, CONCAT(u.firstname, ' ', u.lastname) as adSellerName,
               s.score, s.number, ads.folderpath, ap.disponibility, ap.address, apSize.apartmentSize
        from app.favorites as f
                 inner join app.ads as ads on f.adid = ads.adid
                 inner join app.apartments as ap on ads.adid = ap.adid
                 inner join app.users as u on ads.userid = u.userid
                 inner join app.scores as s on u.scoresellerid = s.scoreid
                 inner join app.apartmentsizes as apSize on ap.apartmentSizeId = apSize.apartmentSizeId
        where f.userid = #{userId}
          and ads.isarchived is distinct from true
    </select>

    <select id="getApartmentsByCriteria" resultType="business.ApartmentViewModel">
        select ads.adid, ads.title, ads.description, ads.price, ads.publicationdate, concat(u.firstname, ' ', u.lastname) as adSellerName,
        s.score, s.number, ads.folderpath, ap.disponibility, ap.address, apSize.apartmentSize
        from app.apartments as ap
        inner join app.ads as ads on ap.adid = ads.adid
        inner join app.users as u on ads.userid = u.userid
        inner join app.scores as s on u.scoresellerid = s.scoreid
        inner join app.apartmentsizes as apSize on ap.apartmentSizeId = apSize.apartmentSizeId
        where ads.isarchived is distinct from true;

        <if test="minPrice != null">
            and ads.price &gt;= #{minPrice}
        </if>
        <if test="maxPrice != null">
            and ads.price &lt;= #{maxPrice}
        </if>
        <if test="minScore != null">
            and s.score &gt;= #{minScore}
        </if>
        <if test="disponibilityBefore != null">
            and ap.disponibility &lt;= #{disponibilityBefore}
        </if>
        <if test="apartmentSize != null">
            and apSize.apartmentSize = #{apartmentSize}
        </if>

        <choose>
            <when test="sortBy == 'price_asc'">
                order by ads.price asc
            </when>
            <when test="sortBy == 'price_desc'">
                order by ads.price desc
            </when>
            <when test="sortBy == 'publication_asc'">
                order by ads.publicationdate asc
            </when>
            <when test="sortBy == 'publication_desc'">
                order by ads.publicationdate desc
            </when>
            <otherwise>
                order by ads.price asc, ads.publicationdate desc
            </otherwise>
        </choose>
    </select>

</mapper>